## 哈希表

为了方便，我们令 `cpdomains` 为 `ss`。

根据题意进行模拟：使用哈希表记录每个域名的总访问次数，从前往后处理所有的 $ss[i]$。在处理某个 $ss[i]$ 时（记长度为 $n$，使用指针 `idx` 代指扫描到的游标位置），先通过指针扫描找到访问数字部分 `cnt = ss[i][0:idx]`，然后「从后往前」处理 $ss[i]$ 的 $[idx + 1, n - 1]$ 部分，按照域名层级「从小到大」的顺序进行截取，并累加访问次数 `cnt` 到当前域名。

最后根据哈希表构造答案。

代码：

* []

```Java
class Solution {
    public List<String> subdomainVisits(String[] ss) {
        Map<String, Integer> map = new HashMap<>();
        for (String s : ss) {
            int n = s.length(), idx = 0;
            while (idx < n && s.charAt(idx) != ' ') idx++;
            int cnt = Integer.parseInt(s.substring(0, idx));
            int start = idx + 1; idx = n - 1;
            while (idx >= start) {
                while (idx >= start && s.charAt(idx) != '.') idx--;
                String cur = s.substring(idx + 1);
                map.put(cur, map.getOrDefault(cur, 0) + cnt);
                idx--;
            }
        }
        List<String> ans = new ArrayList<>();
        for (String key : map.keySet()) ans.add(map.get(key) + " " + key);
        return ans;
    }
}
```

* []

```TypeScript
function subdomainVisits(ss: string[]): string[] {
    const map = new Map<string, number>()
    for (const s of ss) {
        let n = s.length, idx = 0
        while (idx < n && s[idx] != ' ') idx++
        const cnt = Number(s.substring(0, idx))
        const start = idx + 1; idx = n - 1
        while (idx >= start) {
            while (idx >= start && s[idx] != '.') idx--
            const cur = s.substring(idx + 1)
            if (!map.has(cur)) map.set(cur, 0)
            map.set(cur, map.get(cur) + cnt)
            idx--
        }
    }
    const ans = new Array<string>()
    for (const key of map.keys()) ans.push(map.get(key) + " " + key)
    return ans
};
```

* []

```Python
class Solution:
    def subdomainVisits(self, ss: List[str]) -> List[str]:
        mapping = defaultdict(int)
        for s in ss:
            n, idx = len(s), 0
            while idx < n and s[idx] != ' ':
                idx += 1
            cnt = int(s[:idx])
            start, idx = idx + 1, n - 1
            while idx >= start:
                while idx >= start and s[idx] != '.':
                    idx -= 1
                mapping[s[idx + 1:]] += cnt
                idx -= 1
        return [f'{v} {k}' for k, v in mapping.items()]
```

* 时间复杂度：$O(\sum_{i = 0}^{n - 1}len(ss[i]))$
* 空间复杂度：$O(\sum_{i = 0}^{n - 1}len(ss[i]))$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
