## 模拟

根据题意，使用数组 `r` 和 `c` 分别预处理除每行和每列所含 $1$ 的个数，复杂度为 $O(m \times n)$。

随后分别统计特殊位置的个数：满足 $mat[i][j] = 1$ 且 $r[i] = c[j] = 1$ 的位置。

代码：

* []

```Java
class Solution {
    public int numSpecial(int[][] mat) {
        int n = mat.length, m = mat[0].length, ans = 0;
        int[] r = new int[n], c = new int[m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                r[i] += mat[i][j]; c[j] += mat[i][j];
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (mat[i][j] == 1 && r[i] == 1 && c[j] == 1) ans++;
            }
        }
        return ans;
    }
}
```

* []

```TypeScript
function numSpecial(mat: number[][]): number {
    let n = mat.length, m = mat[0].length, ans = 0
    const r = new Array<number>(n).fill(0), c = new Array<number>(m).fill(0)
    for (let i = 0; i < n; i++) {
        for (let j = 0; j < m; j++) {
            r[i] += mat[i][j]; c[j] += mat[i][j]
        }
    }
    for (let i = 0; i < n; i++) {
        for (let j = 0; j < m; j++) {
            if (mat[i][j] == 1 && r[i] == 1 && c[j] == 1) ans++
        }
    }
    return ans
};
```

* 时间复杂度：$O(m \times n)$
* 空间复杂度：$O(m + n)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
