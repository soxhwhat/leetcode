## 写在前面

祝大家中秋快乐 😊 ~

---

## 递归

由于被修剪的是二叉搜索树，因此修剪过程必然能够顺利进行。

容易想到使用原函数作为递归函数：

* 若 `root.val` 小于边界值 `low`，则 `root` 的左子树必然均小于边界值，我们递归处理 `root.right` 即可；
* 若 `root.val` 大于边界值 `high`，则 `root` 的右子树必然均大于边界值，我们递归处理 `root.left` 即可；
* 若 `root.val` 符合要求，则 `root` 可被保留，递归处理其左右节点并重新赋值即可。

代码：

* []

```Java
class Solution {
    public TreeNode trimBST(TreeNode root, int low, int high) {
        if (root == null) return null;
        if (root.val < low) return trimBST(root.right, low, high);
        else if (root.val > high) return trimBST(root.left, low, high);
        root.left = trimBST(root.left, low, high);
        root.right = trimBST(root.right, low, high);
        return root;
    }
}
```

* []

```TypeScript
function trimBST(root: TreeNode | null, low: number, high: number): TreeNode | null {
    if (root == null) return null
    if (root.val < low) return trimBST(root.right, low, high)
    else if (root.val > high) return trimBST(root.left, low, high)
    root.left = trimBST(root.left, low, high)
    root.right = trimBST(root.right, low, high)
    return root
};
```

* 时间复杂度：$O(n)$
* 空间复杂度：忽略递归带来的额外空间开销，复杂度为 $O(1)$

---

## 迭代

自然能够使用「迭代」进行求解：起始先从给定的 `root` 进行出发，找到第一个满足值符合 $[low, high]$ 范围的节点，该节点为最后要返回的根节点 `ans`。

随后考虑如何修剪 `ans` 的左右节点：当根节点符合 $[low, high]$ 要求时，修剪左右节点过程中仅需考虑一边的边界值即可。即对于 `ans.left` 只需考虑将值小于 `low` 的节点去掉（因为二叉搜索树的特性，`ans` 满足不大于 `high` 要求，则其左节点必然满足）；同理 `ans.right` 只需要考虑将大于 `high` 的节点去掉即可。

代码：

* []

```Java
class Solution {
    public TreeNode trimBST(TreeNode root, int low, int high) {
        while (root != null && (root.val < low || root.val > high)) root = root.val < low ? root.right : root.left;
        TreeNode ans = root;
        while (root != null) {
            while (root.left != null && root.left.val < low) root.left = root.left.right;
            root = root.left;
        }
        root = ans;
        while (root != null) {
            while (root.right != null && root.right.val > high) root.right = root.right.left;
            root = root.right;
        }
        return ans;
    }
}
```

* []

```TypeScript
function trimBST(root: TreeNode | null, low: number, high: number): TreeNode | null {
    while (root != null && (root.val < low || root.val > high)) root = root.val < low ? root.right : root.left
    const ans = root
    while (root != null) {
        while (root.left != null && root.left.val < low) root.left = root.left.right
        root = root.left
    }
    root = ans
    while (root != null) {
        while (root.right != null && root.right.val > high) root.right = root.right.left
        root = root.right
    }
    return ans
};
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(1)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
