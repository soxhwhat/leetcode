## 模拟

一个介绍过很多次的做法 : 将「有效括号问题」转化为「分值有效性」的数学判定。

使用 `score` 代指处理过程中的得分，将 `(` 记为 `+1`，将 `)` 记为 `-1`。

一个有效的括号应当在整个过程中不出现负数，因此一旦 `score` 出现负数，我们需要马上增加 `(` 来确保合法性；当整个 `s` 处理完后，还需要添加 `socre` 等同的 `)` 来确保合法性。

代码：

* []

```Java
class Solution {
    public int minAddToMakeValid(String s) {
        int score = 0, ans = 0;
        for (char c : s.toCharArray()) {
            score += c == '(' ? 1 : -1;
            if (score < 0) {
                score = 0; ans++;
            }
        }
        return ans + score;
    }
}
```

* []

```TypeScript
function minAddToMakeValid(s: string): number {
    let scroe = 0, ans = 0
    for (const c of s) {
        scroe += c == '(' ? 1 : -1
        if (scroe < 0) {
            scroe = 0; ans++
        }
    }
    return ans + scroe
};
```

* []

```Python
class Solution:
    def minAddToMakeValid(self, s: str) -> int:
        score, ans = 0, 0
        for c in s:
            score += 1 if c == '(' else -1
            if score < 0:
                score = 0
                ans += 1
        return ans + score
```

* 时间复杂度：$O(n)$
* 空间复杂度：使用 `charAt` 代替 `toCharArray` 操作，复杂度为 $O(1)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
