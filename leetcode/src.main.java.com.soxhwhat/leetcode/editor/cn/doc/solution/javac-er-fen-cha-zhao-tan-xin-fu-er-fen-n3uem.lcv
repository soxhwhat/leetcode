## 解法一：二分查找 + 贪心

我们需要求解$idx$位置放置的数最大为多少，假设$nums[idx] = x$, 我们需要判断当前x是否合法。<br><br>
为了使所有元素之和不超过$maxSum$并且两个相邻元素之差的绝对值小于等于1，那么从$idx$往左$[0, idx]$应该依次赋值为$x, x-1, x-2,...,1$,若还有位置能够放置数，则都放置为$1$。对于$idx$右边的位置同理。通过这种放置方式能够获得最少的元素之和，再判断当前$x$是否合法。<br><br>

* 

```
计算[0,idx] 和 [idx, n - 1]区间所有元素的和
设cnt为区间的元素个数，即idx + 1 或 n - idx
1. cnt >= x, 那么会有多余的数全部放置为1: cnt - mid, 剩下的数为1,2,...x, 和为(x+1)*x/2。  
总和 = cnt - x + (x+1)*x/2
2. cnt < x, 那么放置的数为 x - cnt + 1, x - cnt, ...., x即[x-cnt+1, x],
总和 = (2x-cnt+1) * cnt / 2
```

通过以上分析，可以抽象出判定问题：**给定x，判断当前x是否合法**<br><br>
对于满足条件的最大的$x$，$x+1，x+2,...$一定不满足条件，而$1,2,...,x$这些数都满足条件，我们需要寻找**最大的x**，由于$n=10^9$,直接循环肯定不行，我们使用**二分查找**来寻找满足条件的最大x。 <br><br>

- 时间复杂度：$O(logm)$, 其中m=maxSum
- 空间复杂度：$O(1)$

* []

```java
class Solution {
    public int maxValue(int n, int idx, int sum) {
        int l = 1, r = sum;
        while (l < r) {
            int mid = (l + r + 1) >> 1;
            if (-mid + get(mid, idx + 1) + get(mid, n - idx) <= sum) l = mid;
            else r = mid - 1;
        }
        return r;
    }
    long get(long mid, int cnt) {
        return cnt >= mid ? cnt - mid + (mid + 1) * mid / 2 : (2 * mid - cnt + 1) * cnt / 2;
    }
}
```

* []

```cpp
class Solution {
public:
    int maxValue(int n, int idx, int sum) {
        int l = 1, r = sum;
        while (l < r) {
            int mid = (l + r + 1) >> 1;
            if (-mid + get(mid, idx + 1) + get(mid, n - idx) <= sum) l = mid;
            else r = mid - 1;
        }
        return r;
    }
    long long get(long long mid, int cnt) {
        return cnt >= mid ? cnt - mid + (mid + 1) * mid / 2 : (2 * mid - cnt + 1) * cnt / 2;
    }
};
```

**Note: 二分模板**
二分本质：寻找问题的边界
在[L, R]区间定义某种性质，可以将区间分为两个部分，左边是不满足该性质，右边满足该性质
![图片.png](https://pic.leetcode.cn/1669040203-kQxceJ-%E5%9B%BE%E7%89%87.png)

* []

```java
//寻找绿色边界点
//区间分为[l, mid] 和 [mid + 1, r]  
int l = 0, r = n - 1;
while (l < r) {  /
    int mid = (l + r) >> 1; // 由于mid在左边边区间所以不用+1
    if (check(mid)) {//为true代表mid在绿色区间
        r = mid; //缩小区间到[l, mid]
    } else l = mid + 1; //为false 代表mid在红色区间，缩小区间到[mid+1, r]
}
//循环结束后 r位于红色边界点上

//寻找红色边界点
//区间分为[l, mid - 1] 和 [mid, r]  
int l = 0, r = n - 1;
while (l < r) {  /
    int mid = (l + r + 1) >> 1; // 由于mid在右边区间所以要+1
    if (check(mid)) {//为true代表mid在红色区间
        l = mid; //缩小区间到[mid, r]
    } else r = mid - 1; //为false 代表mid在绿色区间，缩小区间到[l, mid-1]
}
//循环结束后 r位于红色边界点上
```

--- 

如果有问题,欢迎评论区交流, 如果有帮助到你，请给题解点个赞和收藏哈~~~
