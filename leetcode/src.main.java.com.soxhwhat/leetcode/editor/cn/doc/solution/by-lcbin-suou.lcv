**方法一：脑筋急转弯 + 双指针**

替换操作实际上是将 $L$ 往左移动（$L$ 左边为 $X$ 时才能移动），$R$ 往右移动（$R$ 右边是 $X$ 时才能移动），但 $L$ 无法穿过 $R$，$R$ 也无法穿过 $L$。所以，如果去掉 `start` 和 `end` 中的所有 $X$，剩下的字符应该是相同的，否则返回 `false`。

我们使用双指针 $i$ 和 $j$ 从头到尾遍历 `start` 和 `end`：

如果当前字符为 $L$ 且 $i\lt j$，那么这个 $L$ 无法向右移动，返回 `false`；如果当前字符为 $R$ 且 $i\gt j$，那么这个 $R$ 无法向左移动，返回 `false`。

如果双指针均遍历到末尾，返回 `true`。

* [sol1-Python3]

```python
class Solution:
    def canTransform(self, start: str, end: str) -> bool:
        n = len(start)
        i = j = 0
        while 1:
            while i < n and start[i] == 'X':
                i += 1
            while j < n and end[j] == 'X':
                j += 1
            if i >= n and j >= n:
                return True
            if i >= n or j >= n or start[i] != end[j]:
                return False
            if start[i] == 'L' and i < j:
                return False
            if start[i] == 'R' and i > j:
                return False
            i, j = i + 1, j + 1
```

* [sol1-Java]

```java
class Solution {
    public boolean canTransform(String start, String end) {
        int n = start.length();
        int i = 0, j = 0;
        while (true) {
            while (i < n && start.charAt(i) == 'X') {
                ++i;
            }
            while (j < n && end.charAt(j) == 'X') {
                ++j;
            }
            if (i == n && j == n) {
                return true;
            }
            if (i == n || j == n || start.charAt(i) != end.charAt(j)) {
                return false;
            }
            if (start.charAt(i) == 'L' && i < j || start.charAt(i) == 'R' && i > j) {
                return false;
            }
            ++i;
            ++j;
        }
    }
}
```

* [sol1-C++]

```cpp
class Solution {
public:
    bool canTransform(string start, string end) {
        int n = start.size();
        int i = 0, j = 0;
        while (true) {
            while (i < n && start[i] == 'X') ++i;
            while (j < n && end[j] == 'X') ++j;
            if (i == n && j == n) return true;
            if (i == n || j == n || start[i] != end[j]) return false;
            if (start[i] == 'L' && i < j) return false;
            if (start[i] == 'R' && i > j) return false;
            ++i;
            ++j;
        }
    }
};
```

* [sol1-Go]

```go
func canTransform(start string, end string) bool {
	n := len(start)
	i, j := 0, 0
	for {
		for i < n && start[i] == 'X' {
			i++
		}
		for j < n && end[j] == 'X' {
			j++
		}
		if i == n && j == n {
			return true
		}
		if i == n || j == n || start[i] != end[j] {
			return false
		}
		if start[i] == 'L' && i < j {
			return false
		}
		if start[i] == 'R' && i > j {
			return false
		}
		i, j = i+1, j+1
	}
}
```

**复杂度分析：**

时间复杂度 $O(n)$，其中 $n$ 表示字符串 `start` 或 `end` 的长度。

**相似题目：**

[2337. 移动片段得到字符串](https://github.com/doocs/leetcode/blob/main/solution/2300-2399/2337.Move%20Pieces%20to%20Obtain%20a%20String/README.md) ([第 301 场周赛 T3](https://github.com/doocs/leetcode/blob/main/solution/CONTEST_README.md))

---

有任何问题，欢迎评论区交流，欢迎评论区提供其它解题思路（代码），也可以点个赞支持一下作者哈😄~

