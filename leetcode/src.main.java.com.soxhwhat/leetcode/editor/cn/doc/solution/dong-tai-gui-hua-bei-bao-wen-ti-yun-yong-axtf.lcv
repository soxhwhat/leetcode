## 前言

今天是我们讲解**动态规划专题**中的 **「背包问题」的第十三篇**。

**今天将完成一道「分组背包」练习题。**

另外，我在文章结尾处列举了我所整理的关于背包问题的相关题目。

背包问题我会按照编排好的顺序进行讲解（每隔几天更新一篇，确保大家消化）。

你可以先尝试做做，也欢迎你向我留言补充，你觉得与背包相关的 DP 类型题目 ~

---

## 分组背包

在 [分组背包问题](https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247487504&idx=1&sn=9ac523ec0ac14c8634a229f8c3f919d7&chksm=fd9cbb0fcaeb32196b80a40e4408f6a7e2651167e0b9e31aa6d7c6109fbc2117340a59db12a1&token=1936267333&lang=zh_CN#rd) 中我们提到，分组背包不仅仅有「组内物品最多选择一个」的情况，还存在「组内物品必须选择一个」的情况。

对于本题，可以将每个骰子看作一个物品组，且每次 **必须** 从物品组中选择一个物品（所掷得的数值大小视作具体物品）。

这样就把问题转换为：**用 $d$ 个骰子（物品组）进行掷，掷出总和（取得的总价值）为 $t$ 的方案数。**

虽然，我们还没专门讲过「背包问题求方案数」，但基本分析与「背包问题求最大价值」并无本质区别。

我们可以套用「分组背包求最大价值」的状态定义来微调：**$f[i][j]$ 表示考虑前 $i$ 个物品组，凑成价值为 $j$ 的方案数。**

为了方便，我们令物品组的编号从 $1$ 开始，因此有显而易见的初始化条件 $f[0][0] = 1$。

代表在不考虑任何物品组的情况下，只有凑成总价值为 $0$ 的方案数为 $1$，凑成其他总价值的方案不存在。

**不失一般性考虑 $f[i][j]$ 该如何转移，也就是考虑第 $i$ 个物品组有哪些决策。**

根据题意，对于第 $i$ 个物品组而言，可能决策的方案有：

* 第 $i$ 个骰子的结果为 $1$，有 $f[i][j] = f[i - 1][j - 1]$

* 第 $i$ 个骰子的结果为 $2$，有 $f[i][j] = f[i - 1][j - 2]$

  ...

* 第 $i$ 个骰子的结果为 $m$，有 $f[i][j] = f[i - 1][j - m]$

$f[i][j]$ 则是上述所有可能方案的方案数总和，即有：

$$
f[i][j] = \sum_{k = 1}^{m}f[i - 1][j - k], j >= k
$$

#### 朴素二维

代码：

* []

```Java
class Solution {
    int mod = (int)1e9+7;
    public int numRollsToTarget(int n, int m, int t) {
        int[][] f = new int[n + 1][t + 1];
        f[0][0] = 1;
        // 枚举物品组（每个骰子）
        for (int i = 1; i <= n; i++) {
            // 枚举背包容量（所掷得的总点数）
            for (int j = 0; j <= t; j++) {
                // 枚举决策（当前骰子所掷得的点数）
                for (int k = 1; k <= m; k++) {
                    if (j >= k) {
                        f[i][j] = (f[i][j] + f[i-1][j-k]) % mod;
                    }
                }
            }
        } 
        return f[n][t];
    }
}
```

* 时间复杂度：$O(n * m * t)$
* 空间复杂度：$O(n * t)$

#### 滚动数组

根据状态转移方程，我们发现 $f[i][j]$ 明确只依赖于 $f[i - 1][x]$，且 $x < j$。

因此我们可以使用之前学过的「滚动数组」，用很机械的方式将空间从 $O(n * t)$ 优化至 $O(t)$。

需要注意的是，由于我们直接是在 $f[i][j]$ 格子的基础上进行方案数累加，因此在计算 $f[i][j]$ 记得手动置零。

代码：

* Java

```Java
class Solution {
    int mod = (int)1e9+7;
    public int numRollsToTarget(int n, int m, int t) {
        int[][] f = new int[2][t + 1];
        f[0][0] = 1;
        for (int i = 1; i <= n; i++) {
            int a = i & 1, b = (i - 1) & 1;
            for (int j = 0; j <= t; j++) {
                f[a][j] = 0; // 先手动置零
                for (int k = 1; k <= m; k++) {
                    if (j >= k) {
                        f[a][j] = (f[a][j] + f[b][j-k]) % mod;
                    }
                }
            }
        } 
        return f[n&1][t];
    }
}
```

* 时间复杂度：$O(n * m * t)$
* 空间复杂度：$O(t)$

#### 一维空间优化

更进一步，利用「$f[i][j]$ 明确只依赖于 $f[i - 1][x]$，且 $x < j$ 」，我们能通过「[01 背包](https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247485638&idx=1&sn=d7468955c5b121664031fd5c1b5a6f10&chksm=fd9ca3d9caeb2acf2dd4e9f512b2d4dc820107489a094749ffe7cae646f0cc60de06f2d18898&token=800772286&lang=zh_CN#rd)」一维空间优化方式：**将物品维度取消，调整容量维度遍历顺序为「从大到小」。**

代码：

* []

```Java
class Solution {
    int mod = (int)1e9+7;
    public int numRollsToTarget(int n, int m, int t) {
        int[] f = new int[t + 1];
        f[0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = t; j >= 0; j--) {
                f[j] = 0;
                for (int k = 1; k <= m; k++) {
                    if (j >= k) {
                        f[j] = (f[j] + f[j-k]) % mod;
                    }
                }
            }
        } 
        return f[t];
    }
}
```

* 时间复杂度：$O(n * m * t)$
* 空间复杂度：$O(t)$

---

## 总结

不难发现，不管是「组内物品最多选一件」还是「组内物品必须选一件」。

我们都是直接套用分组背包基本思路 **「枚举物品组-枚举容量-枚举决策」** 进行求解。

**分组背包的空间优化并不会降低时间复杂度，所以对于分组背包问题，我们可以直接写方便调试的朴素多维版本（在空间可接受的情况下），如果遇到卡空间，再通过机械的方式改为「滚动数组」形式。**

另外今天我们使用「分组背包问题求方案数」来作为「分组背包问题求最大价值」的练习题。

可以发现，两者其实并无本质区别，都是套用「背包问题求最大价值」的状态定义来微调。

更多的关于「背包问题求方案数」相关内容，在后面也会继续细讲。

---

## 其他「背包」问题

看不明白「背包」解决方案？

以下是公主号讲过的「背包专题」系列目录，欢迎 [关注](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 🍭🍭🍭 ：

1. 01背包 : [背包问题 第一讲](https%3A//mp.weixin.qq.com/s/xmgK7SrTnFIM3Owpk-emmg)

   1. 【练习】01背包 : [背包问题 第二讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247485658%26idx%3D1%26sn%3Df298abe76d9cc058805b6a18d2523db6)

   2. 【学习&练习】01背包 : [背包问题 第三讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247485727%26idx%3D1%26sn%3D2cfb1a43bdb4f47cf4457c58f809deb8)

   3. 【加餐/补充】01 背包：[背包问题 第二十一讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247488868%26idx%3D1%26sn%3D5e54a1d091a8249d3033a28fc299076d)
2. 完全背包 : [背包问题 第四讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247486107%26idx%3D1%26sn%3De5fa523008fc5588737b7ed801caf4c3)

   1. 【练习】完全背包 : [背包问题 第五讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247486225%26idx%3D1%26sn%3Df63388476ccf29e465536a065cffe8d8)

   2. 【练习】完全背包 : [背包问题 第六讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247486435%26idx%3D1%26sn%3D2464b01e9c0fb8d81fcea6dd4ed0ec92)

   3. 【练习】完全背包 : [背包问题 第七讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247486586%26idx%3D1%26sn%3Dda57c4d7d39bcbd2e16c2cc4e21b2361)
3. 多重背包 : [背包问题 第八讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247486649%26idx%3D1%26sn%3Dba09ee2d78377c2ddbb9e43622880133)

4. 多重背包（优化篇）

   1. 【上】多重背包（优化篇）: [背包问题 第九讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247486796%26idx%3D1%26sn%3Da382b38f8aed295410550bb1767437bd)

   2. 【下】多重背包（优化篇）: [背包问题 第十讲](https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247486963&idx=1&sn=51d34f0f841122ed9be2335a402041e8&chksm=fd9ca6eccaeb2ffa1abe413177be376799b427b092bfb73c13e7b77e171b460f4c24b3b7d3bc&token=1872331648&lang=zh_CN#rd)
5. 混合背包 : [背包问题 第十一讲](https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247487034&idx=1&sn=eaa05b76387d34aa77f7f14f35fa78a4&chksm=fd9ca525caeb2c33095d285222dcee0dd072465bf7288bda0aab39e90a04bb7b1af018b89fd4&token=1872331648&lang=zh_CN#rd)

6. 分组背包 : [背包问题 第十二讲](https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247487504&idx=1&sn=9ac523ec0ac14c8634a229f8c3f919d7&chksm=fd9cbb0fcaeb32196b80a40e4408f6a7e2651167e0b9e31aa6d7c6109fbc2117340a59db12a1&token=1936267333&lang=zh_CN#rd)

   1. 【练习】分组背包 : [背包问题 第十三讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247487587%26idx%3D1%26sn%3Dcc18c2e8c3374612113df7ab7fdc8d46)
7. 多维背包

   1. 【练习】多维背包 : [背包问题 第十四讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247487782%26idx%3D1%26sn%3Df6852cea7a28eb2c522dc424270617b5)

   2. 【练习】多维背包 : [背包问题 第十五讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247488103%26idx%3D1%26sn%3D5767d5691b6c87f15ca3182c3742fc79)
8. 树形背包 : [背包问题 第十六讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247488290%26idx%3D1%26sn%3Da9c525e36211710e0ff480e3300e346b)

   1. 【练习篇】树形背包 : [背包问题 第十七讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247488337%26idx%3D1%26sn%3D016e65bdff75841c9041a14adeb24f64)

   2. 【练习篇】树形背包 : [背包问题 第十八讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247488400%26idx%3D1%26sn%3D7ec15fd8dbb8d85fb9a895a7073157ce)
9. 背包求方案数

   1. 【练习】背包求方案数 : [背包问题 第十九讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247488724%26idx%3D1%26sn%3D68b106ec37730b9ce3988195ae45ac7b)

   2. 【练习】背包求方案数 : [背包问题 第十五讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247488103%26idx%3D1%26sn%3D5767d5691b6c87f15ca3182c3742fc79)

   [注：因为之前实在找不到题，这道「求方案数」题作为“特殊”的「多维费用背包问题求方案数」讲过]

10. 背包求具体方案

    1. 【练习】背包求具体方案 : [背包问题 第二十讲](https%3A//mp.weixin.qq.com/s?__biz%3DMzU4NDE3MTEyMA%3D%3D%26mid%3D2247488752%26idx%3D1%26sn%3De7af274d7293558718748d54f7ddade1)
11. 泛化背包
    1. 【练习】泛化背包

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png)（公主号后台回复「送书」即可参与长期看题解学算法送实体书活动）或 加入[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
